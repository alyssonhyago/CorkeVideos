WEBVTT
Kind: captions
Language: en

00:00:04.180 --> 00:00:08.770
No ensino médio ou na aprendizagem da matemática, você 
possivelmente se deparou com os conceitos de números 

00:00:08.770 --> 00:00:09.770
Complexos 

00:00:09.770 --> 00:00:14.350
Um número composto de duas componentes, uma componente real  
e a outra componente imaginária. 

00:00:14.350 --> 00:00:20.650
A componente imaginária é um número real escalar B 
multiplicado pelo número imaginário i, i sendo 

00:00:20.650 --> 00:00:23.360
a raiz quadrada de -1.

00:00:23.360 --> 00:00:27.140
Podemos estender este conceito ao que é chamado de 
um número hipercomplexo.

00:00:27.140 --> 00:00:32.870
Agora, em vez de termos apenas um numero imaginário i,
Temos vários números imaginários i,j,

00:00:32.870 --> 00:00:33.870
e K

00:00:33.870 --> 00:00:39.350
Eles são a raiz quadrada de -1 e 
o produto deles é -1.

00:00:39.350 --> 00:00:45.780
Então, os números hipercomplexos possuem uma parte real
e três partes complexas.

00:00:45.780 --> 00:00:50.850
Números hipercomplexos são tipicamente escritos 
como vetores escalares, s mais v.

00:00:50.850 --> 00:00:57.640
O conceito de números hipercomplexo podem ser encontrados 
Com o matemático irlandês, William 

00:00:57.640 --> 00:00:58.890
Hamilton.

00:00:58.890 --> 00:01:03.500
A história diz que um dia, ele estava caminhando ao longo
Do canal em Dublin e uma equação chave,

00:01:03.500 --> 00:01:09.380
I2 = j2 = k2 = 2jk = -1 surgiu em seu cérebro.

00:01:09.380 --> 00:01:14.550
E, ele gravou a equação nem uma pedra
Na parede da ponte.

00:01:14.550 --> 00:01:20.450
E, há hoje uma placa nesta ponte 
Que comemora o flash de um gênio 

00:01:20.450 --> 00:01:22.980
E inspiração.

00:01:22.980 --> 00:01:28.590
O numero hipercomplexo é a base de um objeto 
matemático que chamamos de quaternion.

00:01:28.590 --> 00:01:32.590
Eu denoto um quaternion como um Q com um 
círculo acima dele.

00:01:32.590 --> 00:01:39.460
Então, nós escrevemos s + v. S é um número escalar real
E v é um vetor que representa a parte complexa 

00:01:39.460 --> 00:01:41.660
desse número.

00:01:41.660 --> 00:01:46.810
Quartions são frequentimente escritos nesta forma onde temos
Onde temos s e, em seguida, o Angulo entre colchetes

00:01:46.810 --> 00:01:51.869
temos os três elementos que constituem o vetor, 
as três partes imaginários de

00:01:51.869 --> 00:01:52.869
quarternion.

00:01:52.869 --> 00:01:55.740
Existem algumas maneiras diferentes de escrever 
os quaternions.

00:01:55.740 --> 00:02:01.420
Esta é a maneira que eu vou usar neste vídeo
E também a forma como a caixa de ferramentas de robótica  

00:02:01.420 --> 00:02:03.899
Representada no MATLAB.

00:02:03.899 --> 00:02:08.739
Assim como podemos determinar a magnitudo ou comprimento 
de um vetor, podemos determinar a magnitude

00:02:08.739 --> 00:02:15.079
ou comprimento de um quartions e é o quadrado
raiz da soma dos quatro elementos numéricos

00:02:15.079 --> 00:02:18.959
No quarternion, parte real e três 
partes imaginarias 

00:02:18.959 --> 00:02:24.400
Agora, chegamos ao que é chamado de quarternion unitário
E este é um quarternon cuja magnitude é

00:02:24.400 --> 00:02:26.090
Igual a 1.

00:02:26.090 --> 00:02:31.440
Quaternions unitários são particularmente úteis porque
podemos usá-los para representar a rotação em três

00:02:31.440 --> 00:02:33.120
dimensões no espaço.

00:02:33.120 --> 00:02:37.810
Um quaternion unitário tem semelhanças
para a representação do ângulo e eixo que 

00:02:37.810 --> 00:02:40.150
discutimos na última seção.

00:02:40.150 --> 00:02:45.400
A parte real do quaternion unitário é igual
ao cosseno da metade do ângulo de rotação e

00:02:45.400 --> 00:02:51.310
o eixo de rotação que eu denotei aqui
por n-hat está relacionado com a parte vetorial de

00:02:51.310 --> 00:02:57.269
o quaternion por esta relacionado ao 
seno da metade do ângulo de rotação.

00:02:57.269 --> 00:02:59.840
Podemos compor dois quarternions unitários

00:02:59.840 --> 00:03:06.390
Assim como podemos composto duas matrizes de rotação,
Eu posso compor dois quaternions e é

00:03:06.390 --> 00:03:10.500
feito usando isso, o que é chamado de Hamiltoniano
regra do produto.

00:03:10.500 --> 00:03:16.650
Então, quaternion 1 gira do quadro A para
quadro B. Quaternion 2 gira a partir do quadro

00:03:16.650 --> 00:03:22.709
B to frame C, then, the product is the rotation
from frame A to frame C. And, I can compute

00:03:22.709 --> 00:03:24.829
the inverse of a quaternion.

00:03:24.829 --> 00:03:29.130
So if I use a quaternion to rotate me from
frame A to frame B, the inverse is quite simple.

00:03:29.130 --> 00:03:33.780
It’s just the negation of the vector part
of the quaternion.

00:03:33.780 --> 00:03:37.390
Once again, I’m going to create a fairly
arbitrary rotation matrix.

00:03:37.390 --> 00:03:45.331
Going to start with some Euler angles, convert
them to rotation matrix 0.1, 0.2, 0.3, just

00:03:45.331 --> 00:03:46.370
for the purpose of illustration.

00:03:46.370 --> 00:03:48.120
Here we have a rotation matrix.

00:03:48.120 --> 00:03:54.130
Now, I’m going to create a quaternion and
I use the quaternion class and I pass in as

00:03:54.130 --> 00:03:55.770
an argument a rotation matrix.

00:03:55.770 --> 00:04:00.410
And, the result is a quaternion object which
we can see in our workspace.

00:04:00.410 --> 00:04:06.140
Now, the quaternion has got a real part and
an imaginary part, which is indicated inside

00:04:06.140 --> 00:04:07.480
the angle brackets.

00:04:07.480 --> 00:04:14.540
I’m going to park the quaternion into a
permanent variable called Q and let’s look

00:04:14.540 --> 00:04:18.790
at what we can do with this quaternion object
in MATLAB.

00:04:18.790 --> 00:04:24.189
One of the things that I can do is I can plot
this quaternion and look at the orientation

00:04:24.189 --> 00:04:29.820
and it behaves just like the trplot function
that we looked at earlier.

00:04:29.820 --> 00:04:34.870
I can compute the inverse of the quaternion,
and here it is here, and we can see that the

00:04:34.870 --> 00:04:40.180
real part of the quaternion remains unchanged,
but the vector part is negated.

00:04:40.180 --> 00:04:47.530
If I multiply the quaternion by its inverse,
the result is the null quaternion.

00:04:47.530 --> 00:04:51.060
This has got a vector component equal to 0.

00:04:51.060 --> 00:04:55.270
So this indicates a 0 rotation.

00:04:55.270 --> 00:04:58.500
I can also compute that using the division
operator in MATLAB.

00:04:58.500 --> 00:05:03.789
So, if I take a quaternion and effectively
divide it by the quaternion, it’s the same

00:05:03.789 --> 00:05:05.250
as multiplying by its inverse.

00:05:05.250 --> 00:05:07.650
I once again get the zero rotation.

00:05:07.650 --> 00:05:14.610
If I have a quaternion and I multiply it by
a vector, let’s say a vector is a unit vector

00:05:14.610 --> 00:05:20.750
in the x direction and I turn it to a column
vector by transposing it, then what this notation

00:05:20.750 --> 00:05:24.969
in MATLAB does is to multiply the vector by
the quaternion.

00:05:24.969 --> 00:05:27.520
Effectively, it rotates the vector.

00:05:27.520 --> 00:05:31.880
Finally, I can do an example to illustrate
interpolation.

00:05:31.880 --> 00:05:37.120
If I call quaternion with no arguments, it
returns a quaternion corresponding to the

00:05:37.120 --> 00:05:38.910
null rotation.

00:05:38.910 --> 00:05:47.129
So, if I use MATLAB syntax like this, I take
my null quaternion, interpolate it with the

00:05:47.129 --> 00:05:53.539
other quaternion I have, Q, and I pass in
an argument which tells me the interpolation

00:05:53.539 --> 00:05:54.539
fraction.

00:05:54.539 --> 00:06:00.340
So, this is interpolating between the quaternion
Q0, the null rotation, and the quaternion

00:06:00.340 --> 00:06:04.199
Q.
The last argument is the interpolation distance.

00:06:04.199 --> 00:06:06.530
0 corresponds to the initial quaternion.

00:06:06.530 --> 00:06:08.710
1 corresponds to the final quaternion.

00:06:08.710 --> 00:06:13.660
If I pass in 0, the result should be our initial
quaternion.

00:06:13.660 --> 00:06:16.860
Make it 1, the result will be our final quaternion.

00:06:16.860 --> 00:06:22.940
And if I put in something like 0.5, this is
an interpolation halfway between the initial

00:06:22.940 --> 00:06:25.419
quaternion and the final quaternion.

00:06:25.419 --> 00:06:30.669
So this is a way to interpolate rotations
that are represented as quaternions.

